-------------------------------------------------------------------------------------
title:git常用命令  version:0.0.4  date:2017-06-06  author:lx_7
-------------------------------------------------------------------------------------

windows下载地址：https://git-for-windows.github.io/

使用手册参考网址：https://git-scm.com/book/zh/v2

推荐参考网址：(廖雪峰)http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

windows安装使用：

	1.按默认选项安装即可
	2.在开始菜单里找到“Git”->“Git Bash”,蹦出一个类似命令行窗口的东西，就说明Git安装成功！
	3.安装完成后，还需要最后一步设置，在命令行输入：
		git config --global user.name "Your Name"
		git config --global user.email "email@example.com"

推荐git图形界面管理软件：tortoisegit

	tortoisegit下载：https://download.tortoisegit.org/tgit/
	tortoisegit安装说明：http://blog.csdn.net/renfufei/article/details/41647937

介绍：

git的底层是数据库，所有数据是以文件方式存储在隐藏的.git目录中

工作区（working directory）就是电脑上能看到的目录；

版本库（repository）就是工作区的隐藏目录.git。

暂存区（stage）是git add和git commit之间的部分，git add提交的文件全部储存在stage里。

master：默认开发分支　　 Head：默认开发分支

origin：默认远程版本库　   Head^：Head的父提交


ssh-keygen -t rsa -C "youremail@example.com" 创建SSH Key

git config --list 查看设置信息

git config --global core.editor /d/gvim.exe 设置默认编辑器


Git Flow(分支模型)：
 

    master――(主)最为稳定功能最为完整的随时可发布的代码；

    hotfix――修复线上代码的 bug；

    develop――(主)永远是功能最新最全的分支；

    feature――某个功能点正在开发阶段；

    release――发布定期要上线的功能。
 
 主要分支每种类型只能有一个，派生分支每个类型可以同时存在多个。


跨平台编程:	

	1.换行符,一个团队需要使用同一的换行符标准（UNIX标准[推荐]或者Windows标准），然后配置自己的代码编辑器和IDE，达到两项要求：

    		在新建文件时默认使用团队统一的换行符标准；
    		在打开文件时保持现有换行符格式不变（不要做自动转换）。
	
		1.1、关闭换行符自动转换功能

			// 提交检出均不转换
			git config --global core.autocrlf false

		1.2、开启换行符检查功能（按照需求设置）

			// 拒绝提交包含混合换行符的文件
			git config --global core.safecrlf true   

			// 允许提交包含混合换行符的文件
			git config --global core.safecrlf false   

			// 提交包含混合换行符的文件时给出警告
			git config --global core.safecrlf warn

	
	2.换行符,保证仓库永远换行符永远采用UNIX标准（LF），在Windows工作空间设置为Windows标准（CRLF），在Mac/Linux工作空间设置为Unxi标准（LF）。	
	
		2.1、设置换行符自动转换功能
	
			# Configure Git on OS X or Linux to properly handle line endings

			//提交时转换为LF，检出时不转换
			git config --global core.autocrlf input

			# Configure Git on Windows to properly handle line endings

			//提交时转换为LF，检出时转换为CRLF
			git config --global core.autocrlf true

		2.2、设置换行符检查功能

			// 提交包含混合换行符的文件时给出警告
			git config --global core.safecrlf warn


	3.单一仓库的换行符局部配置,即时你已经进行了全局配置。 .gitattributes文件(通常位于仓库的根目录,需要提交才会生效)统一换行符。
	
			# Set the default behavior, in case people don't have core.autocrlf set.
			# 采用git认为最好的方式来处理文件，未在.gitattributes中设置的项默认按照这种方式处理；
			
			* text=auto

			# Explicitly declare text files you want to always be normalized and converted
			# to native line endings on checkout.
			*.c text
			*.h text

			# Declare files that will always have CRLF line endings on checkout.
			# 在checkout时，转换Line Ending为crlf；

			*.sln text eol=crlf

			# Denote all files that are truly binary and should not be modified.
			# 告诉git该文件为二进制，防止git修改该文件。binary和符号-text -diff是等价的。

			*.png binary
			*.jpg binary
	

原理：

 本地一般流程：	工作区(修改文件) -> git add -> 暂存区 -> git commit -> 本地仓库 -> git fetch(取回远程所有分支的更新,可取回特定分支更新)

 远程提交一般流程：本地仓库 -> git pull(在本地合并远程分支) -> git push(推送) -> 远程仓库

 远程库建立一般流程: git init --bare <name.git>(创建远程裸库) ->git remote add <remote> <url>(本地库添加远程库地址) -> git push --all(推送所有分支,不会推送tag标签)


建议：
	
 完成一个功能就 commit 一次，完成一次任务 就 push 一次。
	
 清理自己的历史 与 不清洁别人的历史。保持自己的历史干净,永远不要尝试清理其他历史。

 不要在随机点合并上游代码， 也不要在随机点合并下游代码， 会产生随机垃圾。


目录：
	
	1.创建版本库	2.git一般工作提交流程		3.撤销操作	4.修改和提交		5.比较		6.查看提交历史		7.分支与标签	
	
	8.合并与衍合	9.远程操作	10.储藏功能	11.提交空文件夹		12.忽略文件	13.孤儿分支，开启新历史		14.源码编译git



1.创建版本库：

	git clone <url>：克隆远程版本库（先创建远程仓库，在git clone到本地库）
		git clone http[s]://example.com/path/to/repo.git/
		git clone ssh://example.com/path/to/repo.git/ 或 git clone [user@]example.com:path/to/repo.git/
		git clone git://example.com/path/to/repo.git/
		git clone /opt/git/project.git 
		git clone file:///opt/git/project.git
		git clone ftp[s]://example.com/path/to/repo.git/
		git clone rsync://example.com/path/to/repo.git/
	
	git clone -b 分支名 远端URL：克隆指定分支的文件
	
	git clone <版本库的网址> <本地目录名>：克隆到指定目录

	git init：初始化本地版本库
	
	git init --bare <name.git>：创建裸库，只记录git历史提交信息，一般用于远程仓库

2.git一般工作提交流程：

	git branch：确定当前分支没问题

	git status：查看文件修改状态（必要时git diff -- “file”查看具体文件修改内容）

	git pull：拉取远程代码再与本地的当前分支合并，注意是否有冲突（拉取不成功时，git stash缓存代码后在拉，git stash pop出缓存代码）

	git add <file>：最好单个添加修改文件，防止多余文件添加进去

	git commit -m “这里写描述”：把暂存区的所有内容提交到当前分支<一次性提交>

	git push：推送到远程库

3.撤销操作：

	git reset --hard HEAD：撤销工作区中所有未提交文件的修改内容

	git reset HEAD <file>：撤销git add已暂存的文件

	git reset --hard commit_id：撤销commit日志，git log查看commit日志
	
	git reset --hard HEAD^：撤销上次提交的所有改动（--hard表示放弃所有本地改动，HEAD最近一个提交，HEAD^上一次提交）

	git checkout HEAD <file>：撤销指定的未提交文件的修改内容

	git checkout -- <file>:撤销对文件的修改

	git revert <commit>：撤销指定的提交

	git commit --amend：修改最后一次提交

4.修改和提交：

	git status：查看状态

	git diff：查看变更内容

	git add .：跟踪所有改动过的文件,能添加当前目录及其子目录下新增或修改的文件， 不能添加兄弟目录下的文件
	
	git add -A .：添加所有改变的文件
	
	git add -A：表示添加所有内容,高版本的Git使用git add -A表示提交所有文件

	git add <file>：跟踪指定的文件
	
	git add -u：表示添加编辑或者删除的文件，不包括新添加的文件

	git mv <old> <new>：文件改名

	git rm <file>：删除文件

	git rm --cached <file>：停止跟踪文件但不删除

	git commit -m “commit message”：提交所有更新过的文件

	git commit -am “commit message” ：将add和commit合为一步 (用于已经add添加了的跟踪文件)

	git commit --amend -m “commit message”：修改最后一次提交,合并上一次提交（用于反复修改）

5.比较
	
	git diff ：显示所有未添加至index的变更

	git diff --cached  ： 显示所有已添加index但还未commit的变更

	git diff HEAD^ ：比较与上一个版本的差异

	git diff HEAD -- ./lib ：比较与HEAD版本lib目录的差异

	git diff origin/master..master ：比较远程分支master上有本地分支master上没有的

	git diff origin/master..master --stat ：只显示差异的文件，不显示具体内容

   	git difftool xxx.c ：将某个文件的当前版本和代码库中的版本做比较
   
  	git difftool branch1 branch2 ：比较两个分支
   
　 	git difftool branch_name  xxx.c ：比较其他分支的文件,将某个文件的当前版本，和某个分支中这个文件的版本做比较

6.查看提交历史：

	git log：查看提交历史
	
	git log -1：显示1行日志 -n为n行

	git log -p <file>：查看指定文件的提交历史
	
	git log --stat ：显示提交日志及相关变动文件

	git log --graph --pretty=oneline --abbrev-commit:查看历史合并地图

	git blame <file>：以列表方式查看指定文件的提交历史
	
	git grep "delete from" ：文件中搜索文本“delete from”
	
	git show dfb02e6e4f2f7b573337763e5c0013802e392818 ：显示某个提交的详细内容	
	
	git show dfb02 ：可只用commitid的前几位

	git show HEAD^ ：显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本
	
	git show v2.0 ：显示v2.0的日志及详细内容

7.分支与标签：

	切换：

	git checkout -b <branch>：创建分支并切换到该分支

	git checkout -b branch-name origin/branch-name：在本地创建和远程分支对应的分支并切换到该分支
	
	git checkout <branch/tag>：切换到指定分支或标签

	分支：

	git branch：显示所有本地分支
	
	git branch -r： 列出远程分支
	
	git branch -r -d origin/branch-name：删除远程分支
	
	git branch -a：列出本地分支和远程分支

	git branch <new-branch>：创建新分支

	git branch -m oldbranch newbranch：分支重命名

	git branch -M oldbranch newbranch：分支强制重命名	

	git branch -d <branch>：删除本地分支
	
	git branch -D <branch>：强制删除分支，不能删除当前checkout的分支

	标签：

	git tag：列出所有本地标签

	git tag <tagname> -light：基于最新提交创建轻量标签

	git tag -d <tagname>：删除标签

	git tag -a "标签名" -m "注释内容" [9fbc3d0]:给指定提交添加标签，省略提交码则给当前提交添加标签	

	git show <tagname>：可以看到说明文字
	
	git checkout [tagname]：切换到标签版本
	
8.合并与衍合：

	git merge <branch>：快速合并指定分支到当前分支
	
	git merge --no-ff -m "merge with no-ff" <branch>:弃用快速合并(推荐)
	
	解决merge冲突：例如当前在dev分支，准备把master分支合并到dev分支时遇到冲突，解决步骤：

			git merge --abort 中止冲突的合并

			对于冲突的文件，选择使用哪个分支的代码：
				git merge -X theirs master 使用master分支
				git merge -X ours master 使用dev分支，也就是当前所在的分支
				
	
	如果merge 没有发生冲突，git会自动合并，这时候会打开vim的编辑界面，提示你写提交说明：
			
			Merge branch 'master' into dev
			# Please enter a commit message to explain why this merge is necessary,...

		注意到第一行已经有一句提交说明了，如果没有要补充的就直接运行 :wq 保存并退出vim；

	git rebase <branch>：衍合指定分支到当前分支
	
	git rebase -i HEAD~4:合并最近的5次提交，如果想中止操作，git rebase --abort

9.远程操作：

	远程库：

	git remote -v：查看远程版本库信息

	git remote show <remote>：查看指定远程版本库信息

	git remote add <remote> <url>：添加远程版本库
	
	git remote rm <remote>: 删除远程库
	
	git branch --set-upstream branch-name origin/branch-name:建立本地分支和远程分支的关联

	获取远程库更新：

	git fetch <remote>：从远程库获取代码
	
	git fetch <远程主机名> <分支名>:取回特定分支的更新
	
	拉取远程库代码：

	git pull <remote> <branch>：拉取代码及合并
	
	git pull --all：拉取远程所有的分支
	
	git pull <远程库名> <远程分支名>:<本地分支名>:取回远程主机某个分支的更新，再与本地的指定分支合并
	
	推送到远程库:
	
	git push --all origin：推送所有分支
	
	git push <remote> <branch>：上传代码及合并

	git push -u <remote> <branch>: 使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push；

	git push <remote> :<branch/tag-name>：删除远程分支或标签
	
	git push <remote> :refs/tags/<tagname>：删除远程标签

	git push --tags：上传所有标签//默认情况下，git push命令不会将标签上传到远程服务器上

10.储藏功能

	git stash  或 git save "hello world" 保存进度 
            
  	git stash pop  恢复最近一个进度

   	git stash pop stash@{num}。num 就是你要恢复的工作现场的编号 
  
  	git stash list   查看储藏内容

   	git stash show stash@{0} --patch  显示某一个储藏区差异


11.提交空文件夹

  在空目录下创建.gitkeep文件。在该文件中写下如下内容(可选)：
	# Ignore everything in this directory   
	*   
	# Except this file !.gitkeep 
  在空目录下创建.gitignore文件。在该文件中写下如下内容(可选)：
	# Ignore everything in this directory   
	*   
	# Except this file !.gitignore
	
  
12.忽略文件
	
  	 .gitignore文件对其所在的目录及所在目录的全部子目录均有效
	 	/<file-name>：内容直接写要忽略的文件或者文件夹
   	不忽略文件	
	要忽略的文件夹一定要结尾 /* ，否则不忽略规则将无法生效
		/node_modules/*
		!/node_modules/layer/:内容不忽略文件夹


13.孤儿分支，开启新历史
	
	如果你想抛弃所有的git历史纪录，你可以创建一个孤儿分支，它不继承自任何父分支。而是重新开启一段git历史记录。 
	
	它不会丢失之前的文件，你只需要重新把它们commit一次。例如：
	
	git checkout --orpha gh-pages：上述命令创建了一个分支gh-pages。
	
	如果原始分支master是空的，那么gh-pages分支创建后，master分支将消失。如果master不空，那么不消失。


14.源码编译git。遇到了一些问题，主要是依赖没安装完整（也能编译成功，但是缺少功能）。

	要安装的依赖是：

		zlib
		openssl(--shared和-fPIC选项)
		libcurl（--with-ssl）
		expat
		ascilldoc

	把这些源码下载下来编译好，就行了。

	要注意的是openssl要先于libcurl编译，因为libcurl在configure阶段需要开启--with-ssl选项来指明openssl的路径，否则就无法支持很好地https协议（git pull失败）。

	另外openssl的configure阶段要使用--shared -fPIC选项使编译生成动态库（.so，默认是静态库.a），这样才能被libcurl调用。
	
	如果之前已经生成过静态库了，重新编译之前要sudo make clean一下。