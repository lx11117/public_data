---------------------------------------------------------------------------------------
title: node常用命令 date: 2017-07-11 version: 0.0.0 author: lx_7
---------------------------------------------------------------------------------------

参考：http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501245426ad4b91f2b880464ba876a8e3043fc8ef000 (廖雪峰)
官网：https://nodejs.org/en/

tips：

    nvm：node多版本控制工具，参考：http://bubkoo.com/2017/01/08/quick-tip-multiple-versions-node-nvm/


    npm：第一是npm这个开源的模块登记和管理系统，也就是这个站点：https://www.npmjs.com。第二个指的是 nodejs package manager 也就是nodejs的包管理工具。


    nrm：就是 npm registry manager 也就是npm的镜像源管理工具,有时候国外资源太慢，那么我们可以用这个来切换镜像源。

         命令：nrm ls 用于展示所有可切换的镜像地址。命令：nrm use cnpm 我们这样就可以直接切换到cnpm上了。参考：http://blog.csdn.net/tyro_java/article/details/51232458

         编辑npm配置文件 C:\Users\[username]\.npmrc 文件，在文件中保存以下内容，用于将相关的npm源切换到国内的taobao镜像。

            registry=https://registry.npm.taobao.org
            sass_binary_site=https://npm.taobao.org/mirrors/node-sass/
            phantomjs_cdnurl=http://npm.taobao.org/mirrors/phantomjs
            ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/


    cnpm：它是中国版的npm镜像库，地址在这里：https://cnpmjs.org/，也是npm官方的一个拷贝。淘宝也弄了一个和npm一样的镜像库，http://npm.taobao.org/，它和官方的npm每隔10分钟同步一次。

          安装方式： npm install -g cnpm --registry=http://r.cnpmjs.org ，安装好了cnpm后，直接执行cnpm install 包名。


    electron： 提供了一个能通过 JavaScript 和 HTML 创建桌面应用的平台，同时集成 Node 来授予网页访问底层系统的权限。Electron用 web 页面作为它的 GUI，而不是绑定了 GUI 库的 JavaScript。

           它结合了 Chromium、Node.js 和用于调用操作系统本地功能的 APIs（如打开文件窗口、通知、图标等）。

           参考：https://github.com/nodejh/nodejh.github.io/issues/39
           官方：https://github.com/electron/electron/tree/master/docs-translations/zh-CN


安装完成后，在Windows环境下，请打开命令提示符，然后输入node -v，如果安装正常，你应该看到v7.6.0这样的输出：

        C:\Users\IEUser>node -v
        v7.6.0
    
    交互环境：
    
        继续在命令提示符输入node，此刻你将进入Node.js的交互环境。在交互环境下，你可以输入任意JavaScript语句，例如100+200，回车后将得到输出结果。

        要退出Node.js环境，连按两次Ctrl+C。
        
    执行环境；
        
        第一行总是写上'use strict';是因为我们总是以严格模式运行JavaScript代码，避免各种潜在陷阱。

        然后，选择一个目录，例如C:\Workspace，把文件保存为hello.js，就可以打开命令行窗口，把当前目录切换到hello.js所在目录，然后输入以下命令运行这个程序了：

        C:\Workspace>node hello.js
        Hello, world.

        也可以保存为别的名字，比如first.js，但是必须要以.js结尾。此外，文件名只能是英文字母、数字和下划线的组合。

        如果当前目录下没有hello.js这个文件，运行node hello.js就会报错：

        C:\Workspace>node hello.js
        module.js:338
            throw err;
                  ^
        Error: Cannot find module 'C:\Workspace\hello.js'
            at Function.Module._resolveFilename
            at Function.Module._load
            at Function.Module.runMain
            at startup
            at node.js

        报错的意思就是，没有找到hello.js这个文件，因为文件不存在。这个时候，就要检查一下当前目录下是否有这个文件了。


Node模块的安装过程：


        1.发出npm install命令

        2.npm 向 registry 查询模块压缩包的网址

        3.下载压缩包，存放在~/.npm目录

        4.解压压缩包到当前项目的node_modules目录


    安装之前，npm install会先检查，node_modules目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。

    如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用-f或--force参数。例：$ npm install <packageName> --force


    注意，一个模块安装以后，本地其实保存了两份。一份是~/.npm目录下的压缩包，另一份是node_modules目录下解压后的代码。但是，运行npm install的时候，只会检查node_modules目录，而不会检查~/.npm目录
    。也就是说，如果一个模块在～/.npm下有压缩包，但是没有安装在node_modules目录中，npm 依然会从远程仓库下载一次新的压缩包。


    npm install --cache-min 9999999 <package-name> / npm install --cache-min Infinity <package-name>    #从缓存目录安装模块,只有超过这个时间的模块，才会从 registry 下载。


npm安装模块：

    本地安装，如grunt-cli

    npm install grunt-cli       #安装包grunt-cli，默认会安装最新的版本

        npm install grunt-cli@"0.1.9"   #安装0.1.9版本的grunt-cli

        npm install grunt-cli --save 或 npm install grunt-cli -S #安装包grunt-cli并将信息将加入到package.json文件的dependencies（生产阶段的依赖）

        npm install grunt-cli --save-dev 或 npm install grunt-cli -D #安装包grunt-cli并将包信息写入package.json文件的devDependencies（开发阶段的依赖）配置中，
                                    这样代码提交到github时，就不用提交 node_modules这个文件.

        npm install grunt-cli --save-optional 或 npm install grunt-cli -O    #安装包grunt-cli并将信息将加入到optionalDependencies（可选阶段的依赖）

        模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包


package.json字段：


      1.name: package的名字（由于他会成为url的一部分，所以 non-url-safe 的字母不会通过，也不允许出现"."、"_"），最好先在http://registry.npmjs.org/上搜下你取的名字是否已经存在

      2.version: package的版本，当package发生变化时，version也应该跟着一起变化，同时，你声明的版本需要通过semver的校验（semver可自行谷歌）

      3.dependencies: package的应用依赖模块，应用依赖模块会安装到当前模块的node_modules目录下

      4.devDependencies：package的开发依赖模块，即别人要在这个package上进行开发

      5.其他：参见官网


npm：node包管理器

    npm config  #管理npm的配置路径

    npm config ls   #查看配置

    npm config get cache    #查看缓存目录的具体位置

    npm config set prefix "D:\Program Files\nodejs\node_global" #原程序默认在c盘,设置npm安装程序时的默认位置

    npm config set cache "D:\Program Files\nodejs\node_cache"   #原程序默认在c盘,设置npm安装程序时的缓存位置

    修改了默认安装位置后，windows：

        需要设置一个系统环境变量 NODE_PATH = D:\Program Files\nodejs\node_global\node_modules

        增加一个用户环境变量 PATH = D:\Program Files\nodejs\node_global

        tips:用户环境变量需要放在原路径C:\Users\Administrator\AppData\Roaming\npm前面


    npm config set proxy=http://dev-proxy.oa.com:8080   #设置下载代理

    npm config set registry="http://r.cnpmjs.org"       #设置下载镜像

    npm --registry https://registry.npm.taobao.org install express      #临时使用

    npm install -g cnpm --registry=https://registry.npm.taobao.org      #cnpm工具，如安装淘宝镜像


    npm install [-g]    #本地或全局安装模块

    npm install <packageName> --force / npm install <packageName> -f    #强制重新安装

    npm uninstall [-g]  #本地或全局卸载模块

    npm update  #更新模块

    npm ls      #查看安装的模块

    npm list    #列出已安装模块


    npm show    #显示模块详情

    npm info    #查看模块的详细信息

    npm search  #搜索模块

    npm publish     #发布模块

    npm unpublish   #删除已发布的模块

    npm -v 或 npm version    #显示版本信息

    npm view npm versions   #列出npm 的所有有效版本

    npm install -g npm@2.14.14 /npm update -g npm@2.14.14   #安装指定的npm版本

    npm init    #引导创建一个package.json文件，包括名称、版本、作者这些信息等

    npm outdated    #检查模块是否已经过时

    npm root  [-g]  #查看包的安装路径，输出 node_modules的路径，

    npm help    #查看某条命令的详细帮助 例如输入npm help install





