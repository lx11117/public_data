------------------------------------------------------------------------------------
title: python3.5 总结  version:0.0.0 date:2017-05-26 author:lx_7
------------------------------------------------------------------------------------

tips: 
	目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的,Python程序是大小写敏感的。

下载：
	https://www.python.org/downloads/windows/

推荐：
	(廖雪峰)http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000

安装：
	特别要注意勾上Add Python 3.5 to PATH，然后点“Install Now”即可完成安装。
	
	安装成功后，打开命令提示符窗口，敲入python后，会出现两种情况：
	
		1.你看到提示符>>>就表示我们已经在Python交互式环境中了，可以输入任何Python代码，回车后会立刻得到执行结果。现在，输入exit()并回车，就可以退出Python交互式环境（直接关掉命令行窗口也可以）。
	
		2.得到一个错误：‘python’ 不是内部或外部命令，也不是可运行的程序或批处理文件。
		
		  这是因为Windows会根据一个Path的环境变量设定的路径去查找python.exe，如果没找到，就会报错。如果在安装时漏掉了勾选Add Python 3.5 to PATH，那就要手动把python.exe所在的路径添加到Path中。

		  如果你不知道怎么修改环境变量，建议把Python安装程序重新运行一遍，务必记得勾上Add Python 3.5 to PATH。

解释器：
	当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。
	
	CPython：从Python官方网站下载并安装好Python 3.5后，就直接获得官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。CPython是使用最广的Python解释器。
	
	IPython：IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。
	
	CPython用>>>作为提示符，而IPython用In [序号]:作为提示符。
	
模式：
	命令行模式：看到类似C:\>是在Windows提供的命令行模式,在命令行模式下，可以执行python进入Python交互式环境，也可以执行python hello.py运行一个.py文件。直接运行Python代码不会自动打印出来每行结果。
	
	Python交互模式：看到>>>是在Python交互式环境下,Python交互式环境会把每一行Python代码的结果自动打印出来。可以直接输入代码，然后执行，并立刻得到结果。

运行py文件：
	
	在Windows上是不行的，但是，在Mac和Linux上是可以的:
		
		在.py文件的第一行加上一个特殊的注释： #!/usr/bin/env python3
	
		然后，通过命令给hello.py以执行权限：$ chmod a+x hello.py


input()	#输入,可以让用户输入字符串，并存放到一个变量里。 e.g： >>> name = input()

print()	#输出,可以接受多个字符串，用逗号“,”隔开，会依次打印每个字符串，遇到逗号“,”会输出一个空格。


1.语法：

	按照约定俗成的管理，应该始终坚持使用4个空格的缩进。Python程序是大小写敏感的。
	
	当语句以冒号:结尾时，缩进的语句视为代码块。
	
	有的函数和变量我们希望仅仅在模块内部使用。在Python中，是通过_前缀来实现的。
	
	类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；

	之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，
	
	但是，从编程习惯上不应该引用private函数或变量。
	
	也是有用的代码封装和抽象的方法：外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。

	if 非： if not where 相当于其它语言的 if !where 。
	
	if age >= 18:
    		print('adult')
	elif age >= 6:
   		print('teenager')
	else:
   		print('kid')


	names = ['Michael', 'Bob', 'Tracy']
	for name in names:
    		print(name)
	

	n = 1
	while n <= 100:
    		print(n)
    		n = n + 1
	print('END')


2.特殊数据类型：
	
	list	#列表是一种有序的集合，可以随时添加和删除其中的元素。	例： classmates = ['Apple', 123, True]
	
	tuple	#另一种有序列表叫元组,一旦初始化就不能修改。	例： t = (1,) 只有1个元素的tuple定义时必须加一个逗号,，来消除歧义。
	
	dict	#字典,在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度,key必须是不可变对象。	例： d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
	
	set	#也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。	例：s = set([1, 2, 3])
	
3.函数：

	定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。函数可以同时返回多个值，但其实就是一个tuple。

	3.1函数定义：

def my_abs(x, y=2):
    if x >= 0:
        return x
    else:
        return -x

		调用:
			import module	#导入模块
			import math     #入导math模块
			math.floor()    #调用math模块中的floor()函数
			
			from module import name		#导入指定的模块内的指定函数方法
			from math import floor     #导入math模块中的floor函数方法
			floor()                    #调用floor()函数方法

			用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）
		
		tips:
			if __name__ == '__main__':	#__name__ 是当前模块名，当模块被直接运行时模块名为 __main__ 。
				...

			这句话的意思就是，当模块被直接运行时，if以下代码块将被运行，当模块是被导入时，if代码块不被运行。

	3.2参数:

		定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。
		但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
	
		使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。

		可变参数:

			可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。把参数作为一个list或tuple传进来,简化calc([1,2])、nums = [1, 2] calc(nums[0],nums[1])。
				
def calc(*numbers):
	sum = 0
    	for n in numbers:
       		sum = sum + n * n
    	return sum

		调用: 	1.	calc(1,2)

			2.	nums = [1, 2]
				calc(*nums)

		关键字参数:

			关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。

def person(name, age, **kw):
    print('name:', name, 'age:', age, 'other:', kw)

		调用：	1.	>>> person('Adam', 45, gender='M', job='Engineer')
				name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}

			2.	>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
				>>> person('Jack', 24, **extra)
				name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
		
		命名关键字参数:

			如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。

			和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。
			命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：

def person(name, age, *, city, job):
    print(name, age, city, job)

			调用：
				>>> person('Jack', 24, city='Beijing', job='Engineer')
				Jack 24 Beijing Engineer

			如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了。

def person(name, age, *args, city, job):
    print(name, age, args, city, job)

			命名关键字参数可以有缺省值，从而简化调用：

def person(name, age, *, city='Beijing', job):
    print(name, age, city, job)
			
			调用：	>>> person('Jack', 24, job='Engineer')
				Jack 24 Beijing Engineer

 4.模块

	在Python中，一个.py文件就称之为一个模块（Module）。当一个模块编写完毕，就可以被其他地方引用。
	
	我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。
	
	为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）。
	
	例: 一个abc.py的文件就是一个名字叫abc的模块。
	    假设我们的abc和xyz这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。
	    方法是选择一个顶层包名，比如mycompany，按照如下目录存放：

mycompany
├─ __init__.py
├─ abc.py
└─ xyz.py

	引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，abc.py模块的名字就变成了mycompany.abc，类似的，xyz.py的模块名变成了mycompany.xyz。

	请注意，每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。

demo：hello.py

#!/usr/bin/env python3
#第1行注释可以让这个hello.py文件直接在Unix/Linux/Mac上运行

# -*- coding: utf-8 -*-
#第2行注释表示.py文件本身使用标准UTF-8编码

' a test module '
#第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释

__author__ = 'Michael Liao'
#第6行使用__author__变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名

import sys
#导入sys模块后，我们就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能

def test():
    args = sys.argv
    if len(args)==1:
        print('Hello, world!')
    elif len(args)==2:
        print('Hello, %s!' % args[1])
    else:
        print('Too many arguments!')

if __name__=='__main__':
#当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__，执行本文件时运行后面的代码，最常见的就是运行测试。
#而如果在其他地方导入该hello模块时，if判断将失败

    test()