------------------------------------------------------------------------------------
title: 正则总结  version:0.0.0 date:2018-03-29 author:lx_7
------------------------------------------------------------------------------------
	
	参考：	http://www.regexlab.com/zh/regref.htm
		http://www.runoob.com/regexp/regexp-syntax.html

 非打印字符:

	\cx	#匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。

	\f	#匹配一个换页符。等价于 \x0c 和 \cL。

	\n	#匹配一个换行符。等价于 \x0a 和 \cJ。

	\r	#匹配一个回车符。等价于 \x0d 和 \cM。

	\s	#匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。

	\S	#匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。

	\t	#匹配一个制表符。等价于 \x09 和 \cI。

	\v	#匹配一个垂直制表符。等价于 \x0b 和 \cK。

 特殊字符:
	
	$	#匹配输入字符串的结尾位置。要匹配 $ 字符本身，请使用 \$。

	( )	#标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。

	*	#匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。

	+	#匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。

	.	#匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。

	[	#标记一个中括号表达式的开始。要匹配 [，请使用 \[。

	?	#匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。

	\	#将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。

	^	#匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。

	{	#标记限定符表达式的开始。要匹配 {，请使用 \{。

	|	#指明两项之间的一个选择。要匹配 |，请使用 \|。

	\\	#代表 "\" 本身
	
	[ab5@]	#匹配 "a" 或 "b" 或 "5" 或 "@"

	[^abc]	#匹配 "a","b","c" 之外的任意一个字符

	[f-k]	#匹配 "f"~"k" 之间的任意一个字母

	[^A-F0-3]	#匹配 "A"~"F","0"~"3" 之外的任意一个字符
	
	注意：	用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用非捕获元字符?:放在第一个选项前来消除这种副作用。

		对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。

		缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 \n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。

		查找重复的单词：

			var str = "Is is the cost of of gasoline going up up";
			var patt1 = /\b([a-z]+) \1\b/ig;
			document.write(str.match(patt1));

		\1 指定第一个子匹配项
	
 限定符:
	
	*	#匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。

	+	#匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。

	?	#匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。

	{n}	#n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。

	{n,}	#n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。

	{n,m}	#m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。

 定位符:

	^	#匹配输入字符串开始的位置。

	$	#匹配输入字符串结尾的位置。

	\b	#匹配一个字边界，即字与空格间的位置。

	\B	#匹配非单词边界，即左右两边都是 "\w" 范围或者左右两边都不是 "\w" 范围时的字符缝隙

	\d	#任意一个数字，0~9 中的任意一个

	\D	#匹配所有的非数字字符

	\w	#任意一个字母、数字、下划线，也就是 A~Z,a~z,0~9,_ 中任意一个

	\W	#匹配所有的字母、数字、下划线以外的字符
	
	注意：不能将限定符与定位符一起使用。由于在紧靠换行或者字边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。

	预搜索符,它们本身不匹配任何字符，只是对 "字符串的两头" 或者 "字符之间的缝隙" 附加了一个条件。
	
 正向预搜索:

	?=xxx	#所在缝隙的 右侧，必须能够匹配上 xxx 这部分的表达式

	?!xxx	#所在缝隙的 右侧，必须不能够匹配上 xxx 这部分的表达式

 反向预搜索:

	?<=xxx	#所在缝隙的 左侧, 必须能够匹配上后面 xxx 这部分的表达式

	?<!xxx	#所在缝隙的 左侧, 必须不能够匹配上后面 xxx 这部分的表达式

 贪婪模式:
	
	比如："{m,n}", "{m,}", "?", "*", "+"，具体匹配的次数随被匹配的字符串而定。这种重复匹配不定次数的表达式在匹配过程中，总是尽可能多的匹配。

 非贪婪模式:
	
	 在修饰匹配次数的特殊符号后再加上一个 "?" 号，则可以使匹配次数不定的表达式尽可能少的匹配，使可匹配可不匹配的表达式，尽可能的 "不匹配"。
