------------------------------------------------------------------------------------
title: shell总结  version:0.0.1 date:2018-04-04 author:lx_7
------------------------------------------------------------------------------------

tips: 
	这里指 sh ,即Bourne shell，POSIX（Portable Operating System Interface）标准的shell解释器，它的二进制文件路径通常是/bin/sh，由Bell Labs开发。

推荐：
	http://www.runoob.com/linux/linux-shell.html
	https://github.com/qinjx/30min_guides/blob/master/shell.md
	https://github.com/wzb56/13_questions_of_shell

风格指南:

	https://google.github.io/styleguide/shell.xml

 1.编写：

	新建一个文件，扩展名为sh（sh代表shell）。

	第一行一般是这样：

		#!/bin/sh
		#!/bin/bash
		#!/usr/bin/php

	“#!”是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。

 2.运行：

	2.1：作为可执行程序
		
		chmod +x test.sh
		./test.sh
		
		第一行是给文件添加可执行权限，./test.sh告诉系统说，就在当前目录找。
		直接写test.sh，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里。
	
	2.2：作为解释器参数
		
		/bin/sh test.sh
		/bin/php test.php
		
		这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。

	执行脚本：

		环境变量只能从 父进程 到 子进程 单向传递。

		./1.sh				#子进程执行,结束后返回父进程

		source ./1.sh 或 . ./1.sh	#当前进程执行

		exec ./1.sh			#当前进程执行,但是原有进程则被结束了

 3.echo 
	echo	#直接输出
	echo -e	#启用反斜杠控制字符的转换(参考下表)
	echo -E	#关闭反斜杠控制字符的转换(预设如此)
	echo -n	#取消行末的换行符号(与-e选项下的\c字符同意)
	# man echo	#查看手册echo用法
	
	echo命令所支持的反斜杠控制字符:

	\a	ALERT / BELL			(从系统的喇叭送出铃声)
	\b	BACKSPACE			也就是向左退格键
	\c	produce no further output	取消行末之换行符号
	\E	ESCAPE				脱字符键
	\f	FORMFEED			换页字符
	\n	NEWLINE				换行字符
	\r	RETURN				回车键
	\t	TAB				表格跳位键
	\v	VERTICAL TAB			垂直表格跳位键
	\n	ASCII 八进制编码(以x开头的为十六进制)，此处的n为数字
	\	反斜杠本身

 3.变量
	$n	#获取的第 n 个参数,10 之后只能用 ${n} 、${10}
	$#	#传递到脚本的参数个数
	$*	#以一个单字符串显示所有向脚本传递的参数
	$$	#脚本运行的当前进程 ID 号
	$!	#后台运行的最后一个进程的 ID 号
	$@	#与 $* 相同，但是使用时加引号，并在引号中返回每个参数。
	$-	#显示 Shell 使用的当前选项，与 set 命令功能相同。
	$?	#显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。
	

	$0, $1, $2, $3 ... 	#shell内定变量, 这样的变量分别提取命令行中的部分

	script_name parameter1 parameter2 parameter3 ...
	
	$0就是代表 shell script名称(路径)本身， 而$1就是其后的第一个参数，如此类推...

	my_fun fp1 fp2 fp3 ...	#在函数中, 唯一例外的是$0,function内的$0就是my.sh



	定义变量时，变量名不加美元符号（$），注意，变量名和等号之间不能有空格。
	
		your_name="qinjx"

	使用一个定义过的变量，只要在变量名前面加美元符号即可。变量名外面的花括号是可选的。
	
		your_name="qinjx"
		echo $your_name
		echo ${your_name}

	已定义的变量，可以被重新定义。
		
		your_name="qinjx"
		echo $your_name
		your_name="alibaba"
		echo $your_name

 4.命令替换(commandsubstitution)

	``(反引号)	#命令替换用, 基本上可用在全部的 unix shell 中使用，若写成 shell script ，其移植性比较高。但反单引号容易打错或看错。
		   	 在多次的复合替换中， ``需要额外的转义(escape, )处理。

	$()		#命令替换用, 并不是所有shell都支持。
	
	eval $(cat /website/www/new/mail.txt)	#执行mail中获取的字符串命令

	bash只能作整数运算，对于浮点数是当作字符串处理的。

		$[]		#作整数运算
	
		$(()) 		#作整数运算,其中的变量名称, 可以在其前面加 $符号来替换， 也可以不用
	
			 	还可作不同进制(如二进制、八进制、十六进制)的运算， 只是输出结果均为十进制的。


	test命令	#使用标准的数学比较符号来表示字符串的比较，而用文本符号来表示数值的比较。大于符号或小于符号必须要转义，否则会被理解成重定向。

		test expression		#
		[ expression ]		#请务必注意 [] 之间的空白键,即为test命令的另一种形式
		
		[ "$A" = 123 ] 		#是字符串测试，测试$A是不是1、2、3这三个字符。

		[ "$A" -eq 123 ] 	#是整数测试，以测试$A是否等于123.

		[ -e "$A" ] 		#文件测试，测试123这份文件是否存在.
		
		[ -n string ]		#测试string长度大于0, 则为true。

		(( ))			#是[ ]的针对数学比较表达式和字符串表达式的加强版,不需要再将表达式里面的大小于符号转义

		[[ ]]			#是[ ]的针对数学比较表达式和字符串表达式的加强版,增加了另一个特性：模式匹配

 5.命令群组(command group) 

	()	#将command group置于 子shell 中去执行

	{}	#则是在同一个 shell 内完成
	
 6.变量替换

	${A}		#用于变量替换。

	export A=b	#设置a为环境变量

	unset A		#取消变量A,让变量A不存在


	${变量#关键词}	#最小匹配,左删除,删除匹配字符

	${变量##关键词}	#最大匹配,左删除,删除匹配字符

	${变量%关键词}	#最小匹配,右删除,删除匹配字符

	${变量%%关键词}	#最大匹配,右删除,删除匹配字符
	
	tips: 数字键盘顺序 3(#) 4($) 5(%)
	
	${变量/oldStr/newStr}	#最小匹配,替换第一个匹配字符

	${变量//oldStr/newStr}	#最大匹配,替换所有匹配字符
	
	${变量:pos:length}	#从 pos 位置截取 length 长度的字符串
	
	${#变量}		#计算长度

	
	初始值设置	str	unset		null		non-null
		
	var=${str-expr}		var=expr	var=		var=$str

	var=${str:-expr}	var=expr	var=expr	var=$str

	var=${str+expr}		var=		var=expr	var=expr

	var=${str:+expr}	var=		var=		var=expr


	var=${str=expr}		str=expr	str不变		str不变
				var=expr	var=		var=$str

	var=${str:=expr}	str=expr	str=expr	str不变
				var=expr	var=expr	var=$str
	
	var=${str?expr}	    expr输出至stderr 	var=		var=$str

	var=${str:?expr}    expr输出至stderr  expr输出至stderr 	var=$str
	
	tips: 带 :, 则连null值也受影响。

 7.注释
	以“#”开头的行就是注释，会被解释器忽略。sh里没有多行注释，只能每一行加一个#号。

 8.变量类型

	字符串:	字符串可以用单引号，也可以用双引号，也可以不用引号。

		单引号：str='this is a string'
			单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的
			单引号字串中不能出现单引号（对单引号使用转义符后也不行）
	
		双引号：your_name='qinjx'
			str="Hello, I know your are \"$your_name\"! \n"
			双引号里可以有变量
			双引号里可以出现转义字符

		拼接字符串：
			your_name="qinjx"
			greeting="hello, "$your_name" !"
			greeting_1="hello, ${your_name} !"

			echo $greeting $greeting_1

	数组: Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。

	      与大部分编程语言类似，数组元素的下标由0开始。
	
		array_name=(value1 value2 ... valuen)

		array_name[0]=value0
		array_name[1]=value1
		
		${array_name[index]}	#读取第 index 个元素的值
		
		${array_name[*]}	#读取数组所有值
		
		${array_name[@]}	#读取数组所有值
		
		${#array_name[@]}	#计算数组元素个数

 9.输入/输出重定向

	command > file	#执行command命令然后将输出的内容重定向到 file。

	command < file	#将输入重定向到 file。

	command >> file	#将输出以追加的方式重定向到 file。

	n > file	#将文件描述符为 n 的文件重定向到 file。

	n >> file	#将文件描述符为 n 的文件以追加的方式重定向到 file。

	n >& m		#将输出文件 m 和 n 合并。

	n <& m		#将输入文件 m 和 n 合并。

	<< tag		#将开始标记 tag 和结束标记 tag 之间的内容作为输入。

	cat file	#查看文件内容
	
	command > /dev/null	#执行command后不显示输出结果,/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。

	一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：

	标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。
	标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。
	标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。
	默认情况下，command > file 将 stdout 重定向到 file，command < file 将stdin 重定向到 file。

	$ command > file 2>&1	#执行command后，将stdout输出和stderr错误输出合并到file文件中

	Here Document：

		是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。

		command << delimiter
    			document
		delimiter

		它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。

		注意：

			结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。
			开始的delimiter前后的空格会被忽略掉。

		e.g：	命令
			$ wc -l << EOF
    				欢迎来到
    				菜鸟教程
    				www.runoob.com
			EOF
			3          # 输出结果为 3 行

			脚本
			#!/bin/bash
			# author:菜鸟教程
			# url:www.runoob.com

			cat << EOF
				欢迎来到
				菜鸟教程
				www.runoob.com
			EOF

 10.函数

	可以 function function_name (){ 
			command1
			command2
			...
		} 
		
	也可以直接 function_name (){
			command1
			command2
			...
		   } 

	fun(){} 只是碰到所定义的名称与现有的命令或者别名冲突的话，或许会失败。

	参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)。
	
	若在script里，用exit RV 来指定其值; 若没有指定, 在结束时，以最后一个命令的RV，为script的RV值。

	函数返回值在调用该函数后通过 $? 来获得。参数用 $n 获取。$1 第一个参数。${10} 第10个参数。

	注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。

	e.g：
		#!/bin/bash
		funWithParam(){
   			echo "第一个参数为 $1 !"
    			echo "第二个参数为 $2 !"
    			echo "第十个参数为 $10 !"
    			echo "第十个参数为 ${10} !"
    			echo "第十一个参数为 ${11} !"
    			echo "参数总数有 $# 个!"
    			echo "作为一个字符串输出所有参数 $* !"
		}
		funWithParam 1 2 3 4 5 6 7 8 9 34 73

 11.语法结构

	if:

		if cmd1; then
    			cmd2;
		elif cmd3; then
 			cmd4
		else
 			cmd5
		fi

	case:

		case "$1" in
			start)
				start
				;;
			stop)
				stop
				;;

			*)
				echo $"Usage: $0 {start|stop|status|restart|condrestart}"
				exit 1
				;;
		esac

	for:

		for var; do
			......
		done

		for ((i = 1; i <= 10; i++))
		do
			echo "num is $i"
		done
	
	while:

		while:; do
			echo looping...
		done
		
		**:是bash的null command，不做任何动作， 除了返回true的return value**。
	
	until:	与while相反， until是在return value 为false时进入循环，否则，结束。

		num=1
		until [ ! "$num" -le 10 ]; do
			echo "num is $num"
			num=$(($num + 1))
		done